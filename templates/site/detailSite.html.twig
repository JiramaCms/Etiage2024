{% extends 'base.html.twig' %}

{% block title %}Detail Site{% endblock %}

{% block body %}
<style>
  .info-card .card-body .bold {
      font-weight: 700;
}
</style>
  <main id="main" class="main">

    <div class="pagetitle">
      <h1>Site : {{site.libelle}}</h1>
      <nav>
        <ol class="breadcrumb">
          <li class="breadcrumb-item"><a href="{{ path('site_liste') }}">Map</a></li>
          <li class="breadcrumb-item active">Dashboard</li>
        </ol>
      </nav>
    </div><!-- End Page Title -->

    <section class="section dashboard">
      <div class="row">

        <!-- Left side columns -->
        <div class="col-lg-8">
          <div class="row">

            <!-- Site Card -->
            <div class="col-xxl-12 col-md-6">
            <div class="card info-card sales-card">

              <div class="filter">
                  <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                  <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                    <li class="dropdown-header text-start">
                      <h6 id="filter-title">Menu</h6>
                    </li>
                    <li><a class="dropdown-item" href="{{ path('app_update_site', {'id': site.id}) }}"  id="filter-today">Modifier le site</a></li>
                  </ul>
                </div>

                <div class="card-body">
                    <h5 class="card-title">Site <span>| Zone</span></h5>

                    <div class="d-flex">
                        <!-- Données du site à gauche -->
                        <div class="site-data col-6">
                            <p class="mb-0 bold">Nom du site : {{site.libelle}}</p>
                            <p class="mb-0">Adresse : {{site.adresse}}</p>
                            <p class="mb-0">Sources : 
                                  {% for source in site.sources %}
                                      {{ source.nom }}{% if not loop.last %}, {% endif %}
                                  {% endfor %}
                            </p>
                            <p class="mb-0">Latitude : {{site.coord.latitude}}</p>
                            <p class="mb-0">Longitude : {{site.coord.longitude}}</p>
                        </div>

                        <!-- Ligne de séparation -->
                        <div class="separator" style="border-left: 1px solid red; height: 100%;"></div>

                        <!-- Données de la zone à droite -->
                        <div class="zone-data col-6 ps-3">
                        {% if zonej is not null %}
                          {% for zone in zonej %}
                                <p class="mb-0 bold">Nom de la zone : {{zone.libelle}}</p>
                                <p class="mb-0">Description : {{zone.description}}</p>
                          {% endfor %}
                        {% endif %}  
                        </div>
                    </div>
                </div>
            </div>
        </div><!-- End SIte Card -->

            <!-- Productions Card -->
            <div class="col-xxl-6 col-md-6">
              <div class="card info-card sales-card">
                <div class="card-body">
                  <h5 class="card-title">Productions <span>| Aujourd'hui</span></h5>

                  <div class="d-flex align-items-center">
                    <div class="card-icon rounded-circle d-flex align-items-center justify-content-center">
                      <i class="bi bi-water"></i>
                    </div>
                    <div class="ps-3">
                      <h6>145</h6>
                      <span class="text-success small pt-1 fw-bold">12%</span> <span class="text-muted small pt-2 ps-1">augmentation</span>

                    </div>
                  </div>
                </div>

              </div>
            </div><!-- End Production Card -->

            <!-- Gap Card -->
            <div class="col-xxl-6 col-xl-12">

              <div class="card info-card customers-card">
                <div class="card-body">
                  <h5 class="card-title">Gap <span>| Aujourd'hui</span></h5>

                  <div class="d-flex align-items-center">
                    <div class="card-icon rounded-circle d-flex align-items-center justify-content-center">
                      <i class="bi bi-cloud-haze2"></i>
                    </div>
                    <div class="ps-3">
                      <h6>1244</h6>
                      <span class="text-danger small pt-1 fw-bold">12%</span> <span class="text-muted small pt-2 ps-1">réduction</span>

                    </div>
                  </div>

                </div>
              </div>

            </div><!-- End Gap Card -->

            <!-- Stats -->
            <div class="col-12">
              <div class="card">

                <div class="filter">
                  <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                  <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                    <li class="dropdown-header text-start">
                      <h6 id="filter-title">Filter par</h6>
                    </li>
                    <li><a class="dropdown-item" href="#filter-title"  id="filter-day">Par jour</a></li>
                    <li><a class="dropdown-item" href="#filter-title"  id="filter-month">Par mois</a></li>
                  </ul>
                </div>

                <div class="card-body">
                  <h5 class="card-title">Reports <span>/Today</span></h5>
                  <form id="filterForm">
                    <div class="row mb-3">
                      <label class="col-2 col-form-label">Stations : </label>
                      <div class="col-sm-3">
                        <select class="form-select" id="station-select" name="station_id">
                          <option value="0" selected>Toutes les stations</option>
                          {% for station in site.stations %}
                            <option value="{{ station.id }}">{{ station.code }}</option>
                          {% endfor %}
                        </select>
                      </div>
                    </div>
                  </form>

                  <!-- Line Chart -->
                  <div class="d-flex justify-content-center">
                    <div id="loading" class="spinner-border" role="status" style="display: none;">
                      <span class="visually-hidden">Loading...</span>
                    </div>
                  </div>
                  <div id="reportsChart"></div>

                  <script>
                    let site = {{sitej|raw}};
                    console.log(site);

                    document.addEventListener("DOMContentLoaded", () => {
                    // Initialiser avec les données du jour
                    getDataByDay().then(dayData => {
                      const labels = dayData.map(production => new Date(production.dateProduction.timestamp * 1000).toLocaleDateString());
                      const data = dayData.map(production => production.sommeProduction);
                      updateChartWithData(labels, data, 'jour');
                    });

                    document.querySelector('#filter-day').addEventListener('click', function () {
                      showLoadingIndicator(true);
                      getDataByDay().then(dayData => {
                        const labels = dayData.map(production => new Date(production.dateProduction.timestamp * 1000).toLocaleDateString());
                        const data = dayData.map(production => production.sommeProduction);
                        updateChartWithData(labels, data, 'jour');
                        showLoadingIndicator(false);

                      });
                    });

                    document.querySelector('#filter-month').addEventListener('click', function () {
                      showLoadingIndicator(true);
                      getDataByMonth().then(monthlyData => {
                        const labels = monthlyData.map(production =>new Date (production.mois.timestamp * 1000).toLocaleDateString('default', { year: 'numeric', month: 'short' }));
                        const data = monthlyData.map(production => production.quantite);
                        updateChartWithData(labels, data, 'mois');
                        showLoadingIndicator(false);

                      });
                    });
                  });

                  function showLoadingIndicator(show) {
                    const loadingElement = document.querySelector('#loading');
                    if (loadingElement) {
                        loadingElement.style.display = show ? 'block' : 'none';
                        if (!show) {
                            setTimeout(() => {
                                loadingElement.style.display = 'none';
                            }, 500); // délai de 500 ms avant de masquer le spinner
                        }
                    }
                }
                document.querySelector('#station-select').addEventListener('change', function () {
                  const stationId = this.value;
                  showLoadingIndicator(true);

                  // Vérifie si "Toutes les stations" est sélectionnée (valeur 0)
                  if (stationId == 0) {
                    // Si toutes les stations sont sélectionnées, on utilise la logique par défaut pour toutes les stations
                    getDataByDay(site.id).then(dayData => {
                      const labels = dayData.map(production => new Date(production.dateProduction.timestamp * 1000).toLocaleDateString());
                      const data = dayData.map(production => production.sommeProduction);
                      updateChartWithData(labels, data, 'jour');
                      showLoadingIndicator(false);
                    });
                  } else {
                    // Sinon, on récupère les données spécifiques à la station
                    getDataByDayForStation(stationId).then(dayData => {
                      const labels = dayData.map(production => new Date(production.daty.timestamp * 1000).toLocaleDateString());
                      const data = dayData.map(production => production.quantite);
                      updateChartWithData(labels, data, 'jour');
                      showLoadingIndicator(false);
                    });
                  }
                });

                  function getDataByDay() {
                    return fetch(`/site/production/day/${site.id}`)
                      .then(response => response.json())
                      .then(data => {
                        let datas = JSON.parse(data);
                        datas.reverse();
                        //console.log(datas[0].daty.timestamp);// assuming the data structure is correct
                        return datas; 
                      })
                      .catch(error => {
                        console.error('Error fetching daily production data:', error);
                        return [];
                      });
                  }
                  function getDataByDayForStation(stationId) {
                      return fetch(`/station/production/day/${stationId}`)
                        .then(response => response.json())
                        .then(data => {
                          let datas = JSON.parse(data);
                          datas.reverse();
                          return datas;
                        })
                        .catch(error => {
                          console.error('Error fetching daily production data for station:', error);
                          return [];
                        });
                    }

                  function getDataByMonth() {
                    return fetch(`/site/production/month/${site.id}`)
                      .then(response => response.json())
                      .then(data => {
                        let datas = JSON.parse(data);
                        return datas;
                        
                      })
                      .catch(error => {
                        console.error('Error fetching monthly production data:', error);
                        return [];
                      });
                  }

                  let chart; // Déclaration d'une instance globale pour le graphique

                  function updateChartWithData(labels, data, filterType) {
                      if (chart) {
                          chart.updateSeries([{
                              name: 'Production m³',
                              data: data,
                          }]);
                          chart.updateOptions({
                              xaxis: { categories: labels },
                          });
                      } else {
                          chart = new ApexCharts(document.querySelector("#reportsChart"), {
                              series: [{
                                  name: 'Production m³',
                                  data: data,
                              }],
                              chart: {
                                  height: 350,
                                  type: 'area',
                                  toolbar: { show: false },
                              },
                              markers: {
                          size: 4
                        },
                        colors: ['#4154f1'],
                        fill: {
                          type: "gradient",
                          gradient: {
                            shadeIntensity: 1,
                            opacityFrom: 0.3,
                            opacityTo: 0.4,
                            stops: [0, 90, 100]
                          }
                        },
                        dataLabels: {
                          enabled: false
                        },
                        stroke: {
                          curve: 'smooth',
                          width: 2
                        },
                              xaxis: { categories: labels },
                          });
                          chart.render();
                      }

                      document.querySelector('#filter-title').innerText = `Par ${filterType}`;
                  }
                    
                  </script>
                  <!-- End Line Chart -->

                </div>

              </div>
            </div><!-- End stats -->

            <!-- Liste d'Objectif  -->
            <div class="col-12">
              <div class="card recent-sales overflow-auto">

                <div class="filter">
                  <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                  <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                    <li class="dropdown-header text-start">
                      <h6>Menu</h6>
                    </li>

                    <li><a class="dropdown-item" href="{{ path('app_add_objectifBySite', {'id': site.id}) }}">Nouvel objectif</a></li>
                    <li><a class="dropdown-item" href="#">Liste objectifs</a></li>
                  </ul>
                </div>

                <div class="card-body">
                  <h5 class="card-title">Objectifs</h5>

                  <table class="table table-borderless datatable">
                    <thead>
                      <tr>
                        <th scope="col">#</th>
                        <th scope="col">Désignation</th>
                        <th scope="col">Description</th>
                        <th scope="col">Budget</th>
                        <th scope="col">Deadline</th>
                        <th scope='col'>Statut</th>
                      </tr>
                    </thead>
                    <tbody>
                    {% for objectif in site.objectifs|reverse %}
                      <tr>
                        <th scope="row"><a href="{{ path('app_detail_observation', {'id': objectif.id}) }}">#{{objectif.id}}</th>
                        <th scope="row"><a href="{{ path('app_detail_observation', {'id': objectif.id}) }}">#{{objectif.libelle}}</a></th>
                        <td>
                            {% if objectif.description|length > 30 %}
                                {{ objectif.description|slice(0, 30) }}...
                            {% else %}
                                {{ objectif.description }}
                            {% endif %}
                        </td>
                        <td><a href="#" class="text-primary">{{objectif.budget | number_format(0, ',', ' ') }}Ar</a></td>
                        <td>{{objectif.deadline|date('d/m/Y')}}</td>
                        <td><span class="badge bg-success">{{objectif.statut}}</span></td>
                      </tr>
                      <tr>
                    {% endfor %}
                    </tbody>
                  </table>

                </div>

              </div>
            </div><!-- End liste objectif -->


          </div>
        </div><!-- End Left side columns -->

        <!-- Right side columns -->
        <div class="col-lg-4">

          <!-- Recent Action -->
          <div class="card">
            <div class="card-body">
              <h5 class="card-title">Action récente <span>| Today</span></h5>

              <div class="activity">

                {% for objectif in site.objectifs %}
                    {% for action in objectif.actions | reverse %}
                        {% set now = "now"|date('U') %}
                        {% set dateDebut = action.dateDebut|date('U') %}
                        {% set daysPassed = (now - dateDebut) // 86400 %}
                        <div class="activity-item d-flex">
                            <div class="activite-label">{{daysPassed}} jours</div>
                            <i class='bi bi-circle-fill activity-badge text-success align-self-start'></i>
                            <div class="activity-content">
                                {{action.libelle}}
                            </div>
                         </div><!-- End action item-->
                    {% endfor %}
                {% endfor %}

              </div>

            </div>
          </div><!-- End Recent Action -->

          <!-- Incidents cards -->
          <div class="card">
            <div class="filter">
              <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
              <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                <li class="dropdown-header text-start">
                  <h6>Menu</h6>
                </li>

                <li><a class="dropdown-item" href="{{ path('app_add_incidentById', {'id': site.id}) }}">Nouveau incident</a></li>
                <li><a class="dropdown-item" href="#">Liste incident</a></li>
              </ul>
            </div>

            <div class="card-body pb-0">
              <h5 class="card-title">Incidents</h5>

              <div class="news">
                {% for incident in site.incidents %}
                  <div class="post-item mb-4">
                <div class="d-flex align-items-start">
                    <!-- Colonne pour la date -->
                    <div class="me-3">
                        <h5 class="incident-date">{{ incident.daty|date('d/m/Y') }}</h5>
                    </div>
                    <!-- Colonne pour le libelle -->
                    <div>
                        <h4 class="incident-libelle"><a href="#">{{ incident.libelle }}</a></h4>
                    </div>
                </div>
                <!-- Description en dessous -->
                <p>{{ incident.description }}</p>
            </div>
                {% endfor %}
              </div>

            </div>
          </div><!-- End sidebar Incidents list-->
      </div>
    </section>

  </main><!-- End #main -->
{% endblock %}
