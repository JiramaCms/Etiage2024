{% extends 'base.html.twig' %}

{% block title %}Detail Site{% endblock %}

{% block body %}
<style>
  .info-card .card-body .bold {
      font-weight: 700;
  }
  .text-success {
      color: green;
  }

  .text-danger {
      color: red;
  }
</style>
  <main id="main" class="main">

    <div class="pagetitle">
      <h1>Site : {{site.libelle}}</h1>
      <nav>
        <ol class="breadcrumb">
          <li class="breadcrumb-item"><a href="{{ path('site_liste') }}">Accueil</a></li>
          <li class="breadcrumb-item active">Site</li>
        </ol>
      </nav>
    </div><!-- End Page Title -->

    <section class="section dashboard">
      <div class="row">

        <!-- Left side columns -->
        <div class="col-lg-8">
          <div class="row">

            <!-- Site Card -->
            <div class="col-xxl-12 col-md-6">
            <div class="card info-card sales-card">

              <div class="filter">
                <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                  <li class="dropdown-header text-start">
                    <h6 id="filter-title">Menu</h6>
                  </li>
                  <li><a class="dropdown-item" href="{{ path('update_site_poly', {'id': site.id}) }}"  id="filter-today">Modifier le site</a></li>
                  <li><a class="dropdown-item" href="{{ path('app_insert_station') }}"  id="filter-today">Nouveau station</a></li>
                  <li><a class="dropdown-item" href="{{ path('import_production') }}"  id="filter-today">Importer les productions</a></li>
                </ul>
              </div>
              <div class="card-body">
                <h5 class="card-title">Site <span>| Stations</span></h5>
                <div class="d-flex">
                      <!-- Données du site à gauche -->
                      <div class="site-data col-6">
                          <p class="mb-0 bold">Nom du site : {{site.libelle}}</p>
                          <p class="mb-0"><strong style=" color:rgba(1, 41, 112, 0.6);">Adresse</strong> : {{site.adresse}}</p>
                          <p class="mb-0 "><strong style=" color:rgba(1, 41, 112, 0.6);">Stations</strong> : 
                                {% for station in site.stations %}
                                  {{ station.code }}{% if not loop.last %}, {% endif %}
                                {% endfor %}
                          </p>
                          <p class="mb-0"><strong style=" color:rgba(1, 41, 112, 0.6);">Région </strong>: Analamanga</p>
                      </div>

                      <!-- Ligne de séparation -->
                      <div class="separator" style="border-left: 1px solid red; height: 100%;"></div>

                      <!-- Données de la zone à droite -->
                      <div class="zone-data col-6 ps-3">
                      {% if zonej is not null %}
                        {% for zone in zonej %}
                              <p class="mb-0 bold">Nom de la zone : {{zone.libelle}}</p>
                              <p class="mb-0">Description : {{zone.description}}</p>
                        {% endfor %}
                      {% endif %}  
                      </div>
                  </div>
                  <div class="d-flex justify-content-end mt-1">
                    <a class="nav-link btn btn-secondary" href="{{ path('app_prediction_production_site', {'id': site.id}) }}">
                        <span class="fa fa-home"></span> Faire une Prevision
                    </a>
                </div>
              </div>
            </div>
        </div><!-- End SIte Card -->

            <!-- Productions Card -->
            <div class="col-xxl-6 col-md-6">
              <div class="card info-card sales-card">
                <div class="card-body">
                  <h5 class="card-title">Productions <span>| Aujourd'hui</span></h5>

                  <div class="d-flex align-items-center">
                    <div class="card-icon rounded-circle d-flex align-items-center justify-content-center">
                      <i class="bi bi-water"></i>
                    </div>
                    <div class="ps-3">
                      <h6 class="eto">ETo</h6>
                      <span class="text-success small pt-1 fw-bold">12%</span> <span class="text-muted small pt-2 ps-1"></span>

                    </div>
                  </div>
                </div>

              </div>
            </div><!-- End Production Card -->

            <!-- Gap Card -->
            <div class="col-xxl-6 col-xl-12">

              <div class="card info-card customers-card">
                <div class="card-body">
                  <h5 class="card-title">Gap <span>| Aujourd'hui</span></h5>

                  <div class="d-flex align-items-center">
                    <div class="card-icon rounded-circle d-flex align-items-center justify-content-center">
                      <i class="bi bi-cloud-haze2"></i>
                    </div>
                    <div class="ps-3">
                      <h6>1244</h6>
                      <span class="text-danger small pt-1 fw-bold">12%</span> <span class="text-muted small pt-2 ps-1">rédction</span>

                    </div>
                  </div>

                </div>
              </div>

            </div><!-- End Gap Card -->

            <!-- Stats -->
            <div class="col-12">
              <div class="card">

                <div class="filter">
                  <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                  <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                    <li class="dropdown-header text-start">
                      <h6 id="filter-title">Filter par</h6>
                    </li>
                    <li><a class="dropdown-item" href="#filter-title"  id="filter-day">Par jour</a></li>
                    <li><a class="dropdown-item" href="#filter-title"  id="filter-month">Par mois</a></li>
                  </ul>
                </div>

                <div class="card-body">
                  <h5 class="card-title">Rapports <span>/Productions d'eau</span></h5>
                  <form id="filterForm">
                    <div class="row mb-3">
                      <label class="col-2 col-form-label">Stations : </label>
                      <div class="col-sm-3">
                        <select class="form-select" id="station-select" name="station_id">
                          <option value="0" selected>Toutes les stations</option>
                          {% for station in site.stations %}
                            <option value="{{ station.id }}">{{ station.code }}</option>
                          {% endfor %}
                        </select>
                      </div>
                    </div>
                  </form>

                  <!-- Line Chart -->
                  <div class="d-flex justify-content-center">
                    <div id="loading" class="spinner-border" role="status" style="display: none;">
                      <span class="visually-hidden">Loading...</span>
                    </div>
                  </div>
                  <div id="reportsChart"></div>

  <script>
  let site = {{sitej|raw}};
  let besoin  = {{besoinj|raw}};
  console.log(besoin);
  console.log(site);
  let lastProd= null;
  document.addEventListener("DOMContentLoaded", () => {
  // Initialiser avec les données du jour
  getDataByDay().then(dayData => {
    const labels = dayData.map(production => new Date(production.dateProduction.timestamp * 1000).toLocaleDateString());
    const data = dayData.map(production => production.sommeProduction);
    //lastProd = dayData.map(production => production.sommeProduction);
    updateProductionAndGapCards([...data].reverse()); // Mise à jour des cartes
    updateChartWithData(labels, data, 'jour');
  });
 

  document.querySelector('#filter-day').addEventListener('click', function () {
    showLoadingIndicator(true);
    const stationId = document.querySelector('#station-select').value;
    if (stationId == 0) {
      getDataByDay().then(dayData => {
        const labels = dayData.map(production => new Date(production.dateProduction.timestamp * 1000).toLocaleDateString());
        const data = dayData.map(production => production.sommeProduction);
        //updateProductionAndGapCards([...data].reverse());
        updateChartWithData(labels, data, 'jour');
        showLoadingIndicator(false);
      });
    } else {
      getDataByDayForStation(stationId).then(dayData => {
        const labels = dayData.map(production => new Date(production.daty.timestamp * 1000).toLocaleDateString());
        const data = dayData.map(production => production.quantite);
        updateChartWithData(labels, data, 'jour');
        showLoadingIndicator(false);
      });
    }
  });

  document.querySelector('#filter-month').addEventListener('click', function () {
    showLoadingIndicator(true);
    const stationId = document.querySelector('#station-select').value;
    if (stationId == 0) {
      getDataByMonth().then(monthlyData => {
        const labels = monthlyData.map(production => new Date(production.mois.timestamp * 1000).toLocaleDateString('default', { year: 'numeric', month: 'short' }));
        const data = monthlyData.map(production => production.quantite);
        updateChartWithData(labels, data, 'mois');
        showLoadingIndicator(false);
      });
    } else {
      getDataByMonthForStation(stationId).then(monthlyData => {
        const labels = monthlyData.map(production => new Date(production.mois.timestamp * 1000).toLocaleDateString('default', { year: 'numeric', month: 'short' }));
        const data = monthlyData.map(production => production.quantite);
        console.log(monthlyData);
        updateChartWithData(labels, data, 'mois');
        showLoadingIndicator(false);
      });
    }
  });

  document.querySelector('#station-select').addEventListener('change', function () {
    const stationId = this.value;
    showLoadingIndicator(true);

    // Si l'utilisateur sélectionne une station spécifique
    if (stationId == 0) {
      getDataByDay().then(dayData => {
        const labels = dayData.map(production => new Date(production.dateProduction.timestamp * 1000).toLocaleDateString());
        const data = dayData.map(production => production.sommeProduction);
        //updateProductionAndGapCards([...data].reverse());
        updateChartWithData(labels, data, 'jour');
        showLoadingIndicator(false);
      });
    } else {
      getDataByDayForStation(stationId).then(dayData => {
        const labels = dayData.map(production => new Date(production.daty.timestamp * 1000).toLocaleDateString());
        const data = dayData.map(production => production.quantite);
        updateChartWithData(labels, data, 'jour');
        showLoadingIndicator(false);
      });
    }
  });
});

// Fonctions pour récupérer les données des API
function getDataByDay() {
  return fetch(`/site/production/day/${site.id}`)
    .then(response => response.json())
    .then(data => {
      const parsedData = JSON.parse(data).reverse()
      return parsedData;
      })
    .catch(error => {
      console.error('Error fetching daily production data:', error);
      return [];
    });
}

function getDataByDayForStation(stationId) {
  return fetch(`/station/production/day/${stationId}`)
    .then(response => response.json())
    .then(data => {
      const parsedData = JSON.parse(data).reverse()
      return parsedData;
    })
    .catch(error => {
      console.error('Error fetching daily production data for station:', error);
      return [];
    });
}

function getDataByMonth() {
  return fetch(`/site/production/month/${site.id}`)
    .then(response => response.json())
    .then(data => {
      const parsedData = JSON.parse(data)
      return parsedData;
      })
    .catch(error => {
      console.error('Error fetching monthly production data:', error);
      return [];
    });
}

function getDataByMonthForStation(stationId) {
  return fetch(`/station/production/month/${stationId}`)
    .then(response => response.json())
    .then(data => {
      const parsedData = JSON.parse(data)
      return parsedData;
      })
    .catch(error => {
      console.error('Error fetching monthly production data for station:', error);
      return [];
    });
}
function updateProductionAndGapCards(data) {
    if (data.length >= 2) {
        const lastProduction = data[0]; // Dernière valeur
        const previousProduction = data[1]; // Avant-dernière valeur
        console.log(lastProduction,previousProduction);
        const productionElement = document.querySelector('.sales-card .eto');
        //console.log(productionElement);
        if (productionElement) {
            productionElement.innerText = `${lastProduction} m³`;
        } else {
            console.error("Élément pour la production introuvable !");
        }

        // Calcul et affichage de la variation
        const difference = lastProduction - previousProduction;
        const percentage = ((difference / previousProduction) * 100).toFixed(2);
        const salesCardPercentage = document.querySelector('.sales-card .text-success');
        if(percentage >= 0) {
          document.querySelector('.sales-card .text-muted').innerText = 'augmentation';
        } if (percentage < 0){
          document.querySelector('.sales-card .text-muted').innerText = 'réduction';
        }
        salesCardPercentage.innerText = `${percentage}%`;
        salesCardPercentage.classList.toggle('text-danger', percentage < 0);
        salesCardPercentage.classList.toggle('text-success', percentage >= 0);

        // Mise à jour de la carte "Gap"
        const be = besoin.quantite
        const gap = lastProduction - be;
        const gapPercentage = ((gap / be) * 100).toFixed(2);
        document.querySelector('.customers-card h6').innerText = `${gap} m³`;
        const gapCardPercentage = document.querySelector('.customers-card .text-danger');
        if(gapPercentage >= 0) {
          document.querySelector('.customers-card .text-muted').innerText = 'augmentation';
        } if (gapPercentage < 0){
          document.querySelector('.customers-card .text-muted').innerText = 'réduction';
        }
        gapCardPercentage.innerText = `${gapPercentage}%`;
        gapCardPercentage.classList.toggle('text-success', gapPercentage >= 0);
        gapCardPercentage.classList.toggle('text-danger', gapPercentage < 0);
    } else {
        console.error('Pas assez de données pour calculer les productions.');
    }
}
function showLoadingIndicator(show) {
    const loadingElement = document.querySelector('#loading');
    if (loadingElement) {
        loadingElement.style.display = show ? 'block' : 'none';
        if (!show) {
            setTimeout(() => {
                loadingElement.style.display = 'none';
            }, 500); // délai de 500 ms avant de masquer le spinner
        }
    }
}

let chart

// Mise à jour du graphique
function updateChartWithData(labels, data, filterType) {
  if (chart) {
    chart.updateSeries([{ name: 'Production m³', data: data }]);
    chart.updateOptions({ xaxis: { categories: labels } });
  } else {
    chart = new ApexCharts(document.querySelector("#reportsChart"), {
      series: [{ name: 'Production m³', data: data }],
      chart: { height: 350, type: 'area', toolbar: { show: false } },
      markers: { size: 4 },
      colors: ['#4154f1'],
      fill: {
        type: "gradient",
        gradient: {
          shadeIntensity: 1,
          opacityFrom: 0.3,
          opacityTo: 0.4,
          stops: [0, 90, 100],
        },
      },
      dataLabels: { enabled: false },
      stroke: { curve: 'smooth', width: 2 },
      yaxis: {
          title: {
          text: 'Production d\'eau en m³'
          }
      },
      xaxis: { categories: labels },
    });
    chart.render();
  }
  document.querySelector('#filter-title').innerText = `Par ${filterType}`;
}

                    
</script>
<!-- End Line Chart -->
</div>
</div>
</div><!-- End stats -->
    <!-- Liste d'Objectif  -->
    <div class="col-12">
      <div class="card recent-sales overflow-auto">

        <div class="filter">
          <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
          <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
            <li class="dropdown-header text-start">
              <h6>Menu</h6>
            </li>

            <li><a class="dropdown-item" href="{{ path('app_add_objectifBySite', {'id': site.id}) }}">Nouvel objectif</a></li>
            <li><a class="dropdown-item" href="#">Liste objectifs</a></li>
          </ul>
        </div>

        <div class="card-body">
          <h5 class="card-title">Objectifs</h5>

          <table class="table table-borderless datatable">
            <thead>
              <tr>
                <th scope="col">#</th>
                <th scope="col">Désignation</th>
                <th scope="col">Description</th>
                <th scope="col">Budget</th>
                <th scope="col">Deadline</th>
                <th scope='col'>Statut</th>
              </tr>
            </thead>
            <tbody>
            {% for objectif in site.objectifs|reverse %}
              <tr>
                <th scope="row"><a href="{{ path('app_detail_observation', {'id': objectif.id}) }}">#{{objectif.id}}</th>
                <th scope="row"><a href="{{ path('app_detail_observation', {'id': objectif.id}) }}">#{{objectif.libelle}}</a></th>
                <td>
                    {% if objectif.description|length > 30 %}
                        {{ objectif.description|slice(0, 30) }}...
                    {% else %}
                        {{ objectif.description }}
                    {% endif %}
                </td>
                <td><a href="#" class="text-primary">{{objectif.budget | number_format(0, ',', ' ') }}Ar</a></td>
                <td>{{objectif.deadline|date('d/m/Y')}}</td>
                <td><span class="badge bg-success">{{objectif.statut}}</span></td>
              </tr>
              <tr>
            {% endfor %}
            </tbody>
          </table>

        </div>

      </div>
    </div><!-- End liste objectif -->


  </div>
</div><!-- End Left side columns -->

<!-- Right side columns -->
<div class="col-lg-4">

  <!-- Recent Action -->
  <div class="card">
    <div class="card-body">
      <h5 class="card-title">Action récente</h5>

      <div class="activity">

        {% for objectif in site.objectifs %}
            {% for action in objectif.actions | reverse %}
                {% set now = "now"|date('U') %}
                {% set dateDebut = action.dateDebut|date('U') %}
                {% set daysPassed = (now - dateDebut) // 86400 %}
                <div class="activity-item d-flex">
                    <div class="activite-label">{{daysPassed}} jours</div>
                    <i class='bi bi-circle-fill activity-badge text-success align-self-start'></i>
                    <div class="activity-content">
                        {{action.libelle}}
                    </div>
                  </div><!-- End action item-->
            {% endfor %}
        {% endfor %}

      </div>

    </div>
  </div><!-- End Recent Action -->

  <!-- Incidents cards -->
  <div class="card">
    <div class="filter">
      <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
      <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
        <li class="dropdown-header text-start">
          <h6>Menu</h6>
        </li>

        <li><a class="dropdown-item" href="{{ path('app_add_incidentById', {'id': site.id}) }}">Nouveau incident</a></li>
        <li><a class="dropdown-item" href="#">Liste incident</a></li>
      </ul>
    </div>

    <div class="card-body pb-0">
      <h5 class="card-title">Incidents</h5>

      <div class="news">
        {% for incident in site.incidents %}
          <div class="post-item mb-4">
            <div class="d-flex align-items-start">
                <!-- Colonne pour la date -->
                <div class="me-3">
                    <h5 class="incident-date">{{ incident.daty|date('d/m/Y') }}</h5>
                </div>
                <!-- Colonne pour le libelle -->
                <div>
                    <h4 class="incident-libelle"><a href="#">{{ incident.libelle }}</a></h4>
                </div>
            </div>
              <!-- Description en dessous -->
              <p>{{ incident.description }}</p>
          </div>
        {% endfor %}
      </div>

    </div>
  </div><!-- End sidebar Incidents list-->
</div>
</section>
</main><!-- End #main -->
{% endblock %}
