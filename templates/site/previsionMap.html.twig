{% extends 'base.html.twig' %}

{% block title %}Map of Madagascar prévision{% endblock %}

{% block menuactive %}map{% endblock %}

{% block body %}
<style>
    #map {
        height: 700px;
        width: 100%;
        position: relative;
    }

    .content-container {
        display: flex;
        flex-direction: row;
    }

    .map-section {
        width: 65%;
        position: relative;
    }

    .form-chart-column {
        width: 35%;
        display: flex;
        flex-direction: column;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 8px;
    }

    .form-control[disabled], .form-control[readonly], fieldset[disabled] .form-control {
        background-color: #fffffc;
        color: #444;
    }

    .form-section {
        margin-bottom: 20px;
    }
    .marker-icon-jump {
        animation: jumpMarker 0.8s infinite alternate;
    }

    @keyframes jumpMarker {
        from {
            opacity: 1;
        }
        to {
            opacity: 0.3;
        }
    }
    /* Style pour la légende */
    .legend {
        position: absolute;
        bottom: 0px;
        background-color: white;
        border: 0.5px solid #444;
        padding: 10px;
        border-radius: 8px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
        font-size: 14px;
        line-height: 18px;
        color: #333;
        z-index: 1000;
        font-family: 'Poppins', sans-serif;
    }

    .legend h5 {
        margin-top: 0;
        font-size: 16px;
        text-align: center;
        font-weight: 500;
    }

    .legend div {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
        padding-bottom: 5px;
        border-bottom: 1px solid #ccc;
    }

    /* Retirer la bordure inférieure du dernier élément */
    .legend div:last-child {
        border-bottom: none;
    }

    /* Style des icônes FontAwesome */
    .legend i {
        font-size: 18px;
        margin-right: 8px;
    }
    .zone-polygon {
        background: blue; /* Couleur de remplissage du polygone */
        clip-path: polygon(50% 0%, 100% 38%, 81% 100%, 19% 100%, 0% 38%); /* Pentagone */
        width: 15px;
        height: 15px;
        display: inline-block;
        margin-right: 8px;
        cursor: pointer;
        text-decoration: none;    
    }
    /* Couleurs pour chaque niveau de "Gap" */
    .polygon-gray { background-color: #b0b0b0; }   /* Gris pour "Pas de Gap" */
    .polygon-blue { background-color: #87CEEB; }   /* Bleu pour "Production juste" */
    .polygon-yellow { background-color: #FFE680; } /* Jaune pour "Gap < 25%" */
    .polygon-orange { background-color: #FFB266; } /* Orange pour "25% < Gap < 50%" */
    .polygon-red { background-color: #FF6666; }  
    .strikethrough {
        opacity: 0.3;
        text-decoration: line-through;
    }
    .site-data-card {
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .site-id {
        font-size: 1.2em;
        color: #333;
        margin-bottom: 10px;
    }

    .site-id span {
        font-weight: bold;
        color: #007bff;
    }

    .site-production p {
        margin: 5px 0;
        color: #555;
    }

    .site-production span {
        font-weight: bold;
        color: #28a745;
    }

    .site-stations {
        margin-top: 15px;
    }

    .site-stations p {
        font-size: 1.1em;
        color: #333;
        margin-bottom: 5px;
    }

    .site-stations ul {
        list-style: none;
        padding-left: 0;
    }

    .site-stations li {
        margin: 5px 0;
        display: flex;
        justify-content: space-between;
        color: #555;
    }

    .station-type {
        font-weight: bold;
        color: #6c757d;
    }
</style>

<main id="main" class="main">
    <div class="pagetitle">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h1>Map Madagascar Prévision</h1>
        </div>
        <nav>
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="{{ path('site_liste') }}">Accueil</a></li>
                <li class="breadcrumb-item active"><a href="#">Prévision</a></li>

            </ol>
        </nav>
    </div>

    <section class="section">
        <div class="content-container">
            <!-- Section Carte -->
        
            <div class="map-section">
                <div id="controls">
                    <button onclick="selectStation('pompage', 200)">Station de Pompage (+2)</button>
                    <button onclick="selectStation('forage', 400)">Station de Forage (+4)</button>
                </div>
                <div id="map"></div>
                 <div id="legend" class="legend">
                    <h5>Légende</h5>
                    <div><i class="zone-polygon polygon-gray"></i>Pas de Gap</div>
                    <div><i class="zone-polygon polygon-blue"></i>Production juste</div>
                    <div><i class="zone-polygon polygon-yellow"></i>Gap < 25%</div>
                    <div><i class="zone-polygon polygon-orange"></i>25% < Gap < 50%</div>
                    <div><i class="zone-polygon polygon-red"></i>Gap > 50%</div>
                </div>
            </div>

            <!-- Section Formulaire et Graphique (Colonne de droite) -->
            <div class="form-chart-column">
                <!-- Formulaire -->
                <div class="form-section">
                    <h5>Prévision des productions</h5>
                    <form id="dateForm">
                        <div class="mb-3">
                            <label for="start-date" class="form-label">Date de début :</label>
                            <input type="date" class="form-control" id="start-date" name="start-date">
                        </div>
                        <div class="mb-3">
                            <label for="end-date" class="form-label">Date de fin :</label>
                            <input type="date" class="form-control" id="end-date" name="end-date">
                        </div>
                        <button type="submit" class="btn btn-primary" id="submitPrevision">Soumettre</button>
                        <div id="error-message" style="color: red; display: none;"></div>
                    </form>
                </div>
                <div class="data-display mt-3">
                    <h5>Données de production</h5>
                    <div id="dataDisplay">
                        <p>Aucune donnée pour l'instant.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>
</main>
<!-- Leaflet and fullscreen -->
<link rel="stylesheet" href="https://unpkg.com/leaflet-fullscreen/dist/leaflet.fullscreen.css" />
<script src="https://unpkg.com/leaflet-fullscreen/dist/Leaflet.fullscreen.min.js"></script>

<!-- Chart.js or ApexCharts 
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script> -->


<script>
    var map = L.map('map').setView([-18.922647647936802, 47.46631766551795], 6);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Map data © <a href="https://openstreetmap.org">OpenStreetMap</a> contributors'
    }).addTo(map);

    const markerIcons = {
        pompage: L.divIcon({
            className: 'custom-marker pompage',
            html: `
                <img src="/images/pompage.svg" alt="Pompage" width="40" height="40" />
            `,
            iconSize: [40, 40],
            iconAnchor: [20, 40],
        }),
        forage: L.divIcon({
            className: 'custom-marker forage',
            html: `
                <img src="/images/forage.svg" alt="Pompage" width="40" height="40" />
            `,
            iconSize: [40, 40],
            iconAnchor: [20, 40],
        }),
    };

    let sitesData =  {{ sites|raw }};
    var polygons = [];
    var polygonsB = [];
    let previsions = [];
    let selectedStation = null;
    let stationCounts = {
        pompage: 0,
        forage: 0,
    };


    function removePolygons() {
        polygons.forEach(function(polygon) {
            map.removeLayer(polygon);
        });
        polygons = [];
    }
    function selectStation(type, impact) {
        selectedStation = { type, impact };
        alert(`Type de station sélectionné : ${type} (+${impact})`);
    }

const siteProductions = {};

map.on('click', async (e) => {
    if (!selectedStation) {
        alert("Veuillez sélectionner un type de station.");
        return;
    }

    const { lat, lng } = e.latlng;
    const point = L.latLng(lat, lng);

    // Ajouter le marqueur
    L.marker([lat, lng], { icon: markerIcons[selectedStation.type] }).addTo(map);

    // Vérifier si le point est dans un des polygones
    let isInsidePolygon = false;

    for (const polygon of polygons) {
        const geojsonLayer = L.geoJSON(polygon.toGeoJSON());
        const results = leafletPip.pointInLayer([lng, lat], geojsonLayer);

        if (results.length > 0) {
            const siteId = polygon.siteData;
            isInsidePolygon = true;

            let predictions = previsions;
            const matchingPrediction = predictions.find(prediction => prediction.site.id === siteId);

            try {
                // Initialiser les données pour le site si nécessaire
                if (!siteProductions[siteId]) {
                    const rep = await updateZoneProduction(siteId, matchingPrediction.prevision.predictions);
                    siteProductions[siteId] = {
                        production: rep.production,
                        besoin: rep.besoin,
                        stations: { pompage: 0, forage: 0 },
                    };
                }

                // Mettre à jour la production
                siteProductions[siteId].production += selectedStation.impact;

                // Incrémenter le compteur de stations par type pour ce site
                siteProductions[siteId].stations[selectedStation.type]++;
                console.log(`Stations pour le site ${siteId} :`, siteProductions[siteId].stations);

                // Mettre à jour l'affichage
                updateDataDisplay(siteId, siteProductions[siteId]);
                updatePolygonStyle(
                    polygon,
                    siteProductions[siteId].production,
                    siteProductions[siteId].besoin
                );
            } catch (error) {
                console.error("Erreur lors de la mise à jour de la production de zone :", error);
            }
        }
    }

    if (!isInsidePolygon) {
        alert("Le marqueur n'est pas dans un site !");
    }
});
function updateDataDisplay(siteId, siteData) {
    const site = sitesData.find(sites => sites.id === siteId);
    const dataDisplay = document.getElementById("dataDisplay");
    dataDisplay.innerHTML = `
        <div class="site-data-card">
            <h6 class="site-id">Site : <span>${site.libelle}</span></h6>
            <div class="site-production">
                <p><strong>Production :</strong> <span>${Number(siteData.production).toFixed(2)} m³</span></p>
                <p><strong>Besoin :</strong> <span>${Number(siteData.besoin).toFixed(2)} m³</span></p>
            </div>
            <div class="site-stations">
                <p><strong>Stations utilisées :</strong></p>
                <ul>
                    <li><span class="station-type">Pompage :</span> <span>${siteData.stations.pompage}</span></li>
                    <li><span class="station-type">Forage :</span> <span>${siteData.stations.forage}</span></li>
                </ul>
            </div>
        </div>
    `;
}


function updatePolygonStyle(polygon, production, besoin) {
    if (typeof production !== 'number' || typeof besoin !== 'number' || besoin <= 0) {
        console.error("Les paramètres 'production' et 'besoin' doivent être des nombres et 'besoin' doit être supérieur à 0.");
        return;
    }
    var gap = (besoin - production) / besoin;
    gap = parseFloat(gap.toFixed(2)); // Arrondi à 2 décimales

    if (gap > 0.5) {
        polygon.setStyle({ fillColor: "#ff6666", fillOpacity: 0.7 }); // Rouge
    } else if (gap > 0.25 && gap <= 0.5) {
        polygon.setStyle({ fillColor: "#ffcc99", fillOpacity: 0.7 }); // Orange
    } else if (gap > 0 && gap <= 0.25) {
        polygon.setStyle({ fillColor: "#fffacd", fillOpacity: 0.7 }); // Jaune
    } else if (gap < 0) {
        polygon.setStyle({ fillColor: "#87ceeb", fillOpacity: 0.7 }); // Bleu
    } else {
        polygon.setStyle({ fillColor: "#a9a9a9", fillOpacity: 0.5 }); // Gris
    }
}
    async function updateZoneProduction(siteId, previsions) {
    // Préparer les données pour l'appel
    const requestData = {
        siteId: siteId,
        previsions: previsions,
    };
    console.log("Request data:", requestData); // Vérifiez vos données ici

    try {
        const response = await fetch('/update-zone-production', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
            },
            body: JSON.stringify(requestData),
        });

        if (!response.ok) {
            throw new Error("Erreur lors de la requête au serveur.");
        }

        const data = await response.json();
        console.log("Update zone production response:", data);

        return data.rep; // Renvoie uniquement la réponse utile
    } catch (error) {
        console.error("Erreur lors de la mise à jour de la production de zone :", error);
        throw error; // Relance l'erreur pour gérer en amont
    }
}
    function addPolygons(sites) {
        removePolygons();
        sites.forEach(function(site) {
            var coordinates = site.coord.map(function(coord) {
                return [coord.latitude, coord.longitude];
            });
            const fillColor = getFillColor(site.etat);
            var polygon = L.polygon(coordinates, {
                color: "#000000",  // couleur de bordure du polygone
                fillColor: fillColor,  // couleur de remplissage selon l'état
                fillOpacity: 0.5,  // transparence du remplissage
                weight: 2  // épaisseur de la bordure
            }).addTo(map)

            polygon.siteData = site.id;
            polygons.push(polygon);
        });
        polygonsB = polygons;
    }
        function getFillColor(etat) {
            const cleanEtat = String(etat)
            switch (cleanEtat) {
                case '1': return "#87ceeb"; // bleu
                case '2': return "#fffacd"; // jaune
                case '3': return "#ffcc99"; // orange
                case '4': return "#ff6666"; // rouge
                default: return "#a9a9a9"; // gris
            }
        }

    addPolygons(sitesData);

    document.addEventListener('DOMContentLoaded', function() {
        var minDate = "2024-01-01"; // Exemple de date minimum
        var maxDate = "2025-12-31"; // Exemple de date maximum

        var startDatePicker = flatpickr("#start-date", {
            minDate: minDate,
            maxDate: maxDate,
            onChange: function(selectedDates, dateStr, instance) {
                var minDate = instance.selectedDates[0];
                minDate.setDate(minDate.getDate() + 1);
                endDatePicker.set('minDate', minDate);
            }
        });

        var endDatePicker = flatpickr("#end-date", {
            minDate: minDate,
            maxDate: maxDate
        });
    document.getElementById('submitPrevision').addEventListener('click', function(event) {
    event.preventDefault(); // Empêche la soumission par défaut du formulaire

    var startDate = document.getElementById('start-date').value;
    var endDate = document.getElementById('end-date').value;

    if (startDate && endDate) {

        fetch('{{ path('site_etiage_prevision') }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
            },
            body: JSON.stringify({ 'start-date': startDate, 'end-date': endDate })
        })
        .then(response => response.json())
        .then(data => {
            let datas = JSON.parse(data);
            previsions = datas;
            //console.log('Response previsions:', previsions);

            removePolygons();
            datas.forEach(function(data) {
                var coordinates = data.site.coord.map(function(coord) {
                    return [coord.latitude, coord.longitude];
                });
                // Définir la couleur de remplissage en fonction de l'état du site
                var fillColor = "#a9a9a9"; // gris (moins clair)
                if (data.site.etat == '1') {
                    fillColor = "#87ceeb"; // bleu (moins clair)
                } else if (data.site.etat == '2') {
                    fillColor = "#fffacd"; // jaune (moins clair)
                } else if (data.site.etat == '3') {
                    fillColor = "#ffcc99"; // orange (moins clair)
                } else if (data.site.etat == '4') {
                    fillColor = "#ff6666"; // rouge (moins clair)
                }


                var polygon = L.polygon(coordinates, {
                    color: "#000000",  // couleur de bordure du polygone
                    fillColor: fillColor,  // couleur de remplissage selon l'état
                    fillOpacity: 0.5,  // transparence du remplissage
                    weight: 2  // épaisseur de la bordure
                }).addTo(map)

               polygon.on('click', function(e) {
                    map.setView(e.latlng, 11);
                    //currentSelectedMarker = site.id;
                    //console.log("afaka atao ato koa");
                });
                polygon.siteData = data.site.id;
                polygons.push(polygon);
            });

        })
        .catch(error => {
            console.error('Error during prediction:', error);
            var errorMessageElement = document.getElementById('error-message');
            errorMessageElement.style.display = 'block';
            errorMessageElement.textContent = 'Une erreur est survenue lors de la prévision. Veuillez réessayer.';
        });
        } else {
            alert('Veuillez sélectionner une date de début et une date de fin.');
        }
    });
    });

</script>
{% endblock %}
