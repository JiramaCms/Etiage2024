{% extends 'base.html.twig' %}

{% block title %}Ajouter une zone{% endblock %}

{% block menuactive %}map-zone{% endblock %}

{% block body %}
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet.pm@latest/dist/leaflet.pm.css" /> <!-- Leaflet-Geoman CSS -->
    <style>
        #map {
            position: relative;
            height: 500px; /* Assurez-vous que la carte a une hauteur définie */
        }
    </style>

<main id="main" class="main">
    <div class="pagetitle">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h1>Formulaire Zone</h1>
        </div>
        <nav>
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="{{ path('site_liste') }}">Accueil</a></li>
                <li class="breadcrumb-item active">Modifier Site</li>
            </ol>
        </nav>
    </div><!-- End Page Title -->
    <section class="section">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Modifier le site: {{ site.libelle }}</h5>
                        <!-- Table with stripped rows -->
                        <form method="post" action="{{ path('update_site', {'id': site.id}) }}">
                            <div class="form-row">
                                <div class="form-group col-12">
                                    <label for="coords">Coordonnées (WKT)</label>
                                    <input type="text" class="form-control" id="coords" name="coords" readonly>
                                </div>
                            </div>
                            <div id="map"></div>
                            <br><br>
                            <button type="submit" class="btn btn-secondary float-right">Confirmer</button>
                        </form>
                        <!-- End Table with stripped rows -->
                    </div>
                </div>
            </div>
        </div>
    </section>
</main>

<script>
        var map = L.map('map').setView([-18.922647647936802, 47.46631766551795], 6);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: 'Map data © <a href="https://openstreetmap.org">OpenStreetMap</a> contributors'
        }).addTo(map);

        map.zoomControl.setPosition('bottomright');

        const options = {
            position: "topleft",
            drawMarker: false,
            drawPolygon: true,
            drawPolyline: false,
            drawCircle: false,
            drawCircleMarker: false,
            editPolygon: true,
            deleteLayer: true
        };

        var zones = {{ sites|raw }};
        var drawnPolygon;

        function toWKT(coords) {
            let wkt = 'POLYGON((';
            coords[0].forEach((coord, index) => {
                wkt += `${coord.lng} ${coord.lat}`;
                if (index !== coords[0].length - 1) {
                    wkt += ', ';
                }
            });
            wkt += '))';
            return wkt;
        }

        function updateCoordinates(layer) {
            var coords = layer.getLatLngs();
            //var wktCoords = toWKT(coords);
            document.getElementById('coords').value = coords;
        }

        // Fonction pour afficher et marquer le polygone actuel
        function loadCurrentPolygon(zones) {
            // Supprimer tous les anciens polygones sur la carte
            map.eachLayer(function(layer) {
                if (layer instanceof L.Polygon) {
                    map.removeLayer(layer);
                }
            });

            // Créer le polygone actuel et l'ajouter à la carte
            var coordinates = zones.coord.map(function(coord) {
                return [coord.latitude, coord.longitude];
            });
            drawnPolygon = L.polygon(coordinates).addTo(map).bindPopup(zones.libelle);

            // Mettre à jour l'input des coordonnées
            updateCoordinates(drawnPolygon);

            // Activer l'édition du polygone
            drawnPolygon.pm.enable({ allowSelfIntersection: false });

            // Mettre à jour les coordonnées chaque fois que le polygone est modifié
            drawnPolygon.on('pm:edit', function() {
                updateCoordinates(drawnPolygon);
                console.log('Polygone actuel édité');
            });
        }

        loadCurrentPolygon(zones);
        map.pm.addControls(options);

        map.on('pm:create', function(e) {
            // Supprimer le polygone dessiné précédemment
            if (drawnPolygon) {
                map.removeLayer(drawnPolygon);
            }
            drawnPolygon = e.layer;
            updateCoordinates(e.layer);
            console.log('Nouvelle couche créée');

            // Activer l'édition et surveiller les modifications
            e.layer.on('pm:edit', function() {
                updateCoordinates(e.layer);
                console.log('Couches éditée');
            });
        });

        map.on('pm:remove', function(e) {
            if (e.layer === drawnPolygon) {
                document.getElementById('coords').value = '';
                drawnPolygon = null;
                console.log('Couche supprimée');
            }
        });
    </script>
{% endblock %}

