{% extends 'base.html.twig' %}

{% block title %}Map of Madagascar Sites{% endblock %}

{% block menuactive %}map{% endblock %}

{% block body %}
<style>
        /* Custom styles for the map */
    #map {
        height: 600px;
        width: 100%; 
        position: relative;
        z-index: 999;
    }
    .legend {
        position: absolute;
        bottom: 20px;
        left: 20px;
        background-color: white;
        border: 0.5px solid #444;
        padding: 10px;
        border-radius: 8px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
        font-size: 14px;
        line-height: 18px;
        color: #333;
        z-index: 1000;
        font-family: 'Poppins', sans-serif;
    }

    .legend h5 {
        margin-top: 0;
        font-size: 16px;
        text-align: center;
        font-weight: 500;
    }

    .legend div {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
        padding-bottom: 5px;
        border-bottom: 1px solid #ccc;
    }

    /* Retirer la bordure inférieure du dernier élément */
    .legend div:last-child {
        border-bottom: none;
    }

    /* Style des icônes FontAwesome */
    .legend i {
        font-size: 18px;
        margin-right: 8px;
    }

    .zone-polygon {
        clip-path: polygon(50% 0%, 100% 38%, 81% 100%, 19% 100%, 0% 38%);
        width: 15px;
        height: 15px;
        display: inline-block;
        margin-right: 8px;
        cursor: pointer;
        text-decoration: none;
    }

    /* Couleurs pour chaque niveau de "Gap" */
    .polygon-gray { background-color: #b0b0b0; }   /* Gris pour "Pas de Gap" */
    .polygon-blue { background-color: #87CEEB; }   /* Bleu pour "Production juste" */
    .polygon-yellow { background-color: #FFE680; } /* Jaune pour "Gap < 25%" */
    .polygon-orange { background-color: #FFB266; } /* Orange pour "25% < Gap < 50%" */
    .polygon-red { background-color: #FF6666; }  
    .strikethrough {
        opacity: 0.3;
        text-decoration: line-through;
    }
    .sidebar-info {
        position: absolute;
        top: 0;
        right: 0;
        width: 380px;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.9);
        padding: 20px;
        box-shadow: -2px 0 5px rgba(0,0,0,0.5);
        overflow-y: auto;
        z-index: 1000;
        margin: 2px;
        border-radius: 15px;
    }
    .hidden2 {
        display: none;
    }
    .close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: transparent;
        border: none;
        font-size: 20px;
        cursor: pointer;
    }
    #overview-content {
        display: flex;
        flex-direction: column;
    }
    .card-content img {
        width: 50px;
        height: 50px;
    }
    .station-card {
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ddd; /* Ajoute une bordure autour de chaque incident */
        border-radius: 5px;    /* Ajoute des coins arrondis */
        background-color: #f9f9f9; /* Couleur de fond */
        box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* Ombre légère */
    }
    .station-title {
        font-weight: bold;
        margin-bottom: 5px;
    }

    .station-description {
        margin-bottom: 5px;
    }

    .station-date {
        color: #666; /* Couleur de texte plus claire pour la date */
        font-size: 0.9em; /* Réduit légèrement la taille de la police */
    }

    /* Séparateur entre les incidents */
    .station-card + .station-card {
        border-top: 1px solid #ddd; /* Trait de séparation */
        padding-top: 10px;
        margin-top: 10px;
    }

</style>
    <main id="main" class="main">
    <div class="pagetitle">
        <div class="d-flex justify-content-between align-items-center mb-1">
            <h1>Map Madagascar</h1>
            <div class="filter">
                <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                <li><a class="dropdown-item" href="{{ path('new_site_poly') }}"  id="filter-month">Nouveau Site</a></li>
                <li><a class="dropdown-item" href="{{ path('app_insert_station') }}"  id="filter-day">Nouvelle Station</a></li>
                </ul>
            </div>
        </div>
        
        <nav>
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="{{ path('site_liste') }}">Home</a></li>
            </ol>
        </nav>
    </div><!-- End Page Title -->

    <section class="section">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="card-title">Sites Madagascar</h5>
                        <a class="nav-link btn btn-secondary" href="#">
                            Faire une Simulation sur la map
                        </a>
                        </div>
                        <div id="map">
                            <div id="card-container"></div>
                            <div class="sidebar-info hidden2" id="sidebar-info">
                                <button class="close-btn" onclick="closeSidebar()">×</button>
                                <ul class="nav nav-tabs" role="tablist">
                                    <li class="nav-item" role="presentation">
                                        <a class="nav-link active" id="tabOverview" data-bs-toggle="tab" href="#overview" role="tab" aria-selected="true">Overview</a>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <a class="nav-link" id="tabStation" data-bs-toggle="tab" href="#stations" role="tab" aria-selected="false">Stations</a>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <a class="nav-link" id="tabStatistique" data-bs-toggle="tab" href="#statistique" role="tab" aria-selected="false">Statistique</a>
                                    </li>
                                </ul>
                                <div class="tab-content">
                                    <div class="tab-pane fade show active" id="overview" role="tabpanel">
                                        <div id="source-icons"></div> <!-- Placeholder for source icons -->
                                        <p id="overview-content"></p>
                                    </div>
                                    <div class="tab-pane fade" id="stations" role="tabpanel">
                                        <h4>Stations : </h4>
                                        <p id="stations-content"></p>
                                    </div>
                                    <div class="tab-pane fade" id="statistique" role="tabpanel">
                                        <h4>Statistique de production d'eau</h4>
                                        <p id="reportsChart"></p>
                                        <h5>Statistique de gap </h5>
                                        <p id="reportsChartGap"></p>
                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                       <div id="legend" class="legend">
                            <h5>Légende</h5>
                            <div><i class="zone-polygon polygon-gray"></i>Pas de Gap</div>
                            <div><i class="zone-polygon polygon-blue"></i>Production juste</div>
                            <div><i class="zone-polygon polygon-yellow"></i>Gap < 25%</div>
                            <div><i class="zone-polygon polygon-orange"></i>25% < Gap < 50%</div>
                            <div><i class="zone-polygon polygon-red"></i>Gap > 50%</div>
                            <span id="zone-label">Zone</span>
                        </div>
                        <!-- End Table with stripped rows -->
                        

                    </div>
                </div>

            </div>
        </div>
    </section>

</main><!-- End #main -->

    <link rel="stylesheet" href="https://unpkg.com/leaflet-fullscreen/dist/leaflet.fullscreen.css" />
    <script src="https://unpkg.com/leaflet-fullscreen/dist/Leaflet.fullscreen.min.js"></script>
    <script>
        var map = L.map('map').setView([-18.922647647936802, 47.46631766551795], 6);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: 'Map data © <a href="https://openstreetmap.org">OpenStreetMap</a> contributors'
        }).addTo(map);
        map.addControl(new L.Control.Fullscreen());

        var sites = {{ site|raw }};
        var siteDetailUrl = "{{ path('detail_site',{'id' : 'siteId'})}}";
       //console.log(sites[0].coord);
        var polygons = [];
        var currentSelectedMarker = null;
        let chart = null;
        let gapChart = null;
        var stationMarkers = [];



        function removePolygons() {
            polygons.forEach(function(polygon) {
                map.removeLayer(polygon);
            });
            polygons = [];
        }
        function updateSidebarContent(siteData) {
            var addSiteUrlWithId = siteDetailUrl.replace('siteId', siteData.id);         
            document.getElementById('overview-content').innerHTML = `
                <strong>Nom : ${siteData.libelle}</strong>
                Adresse : ${siteData.adresse}<br>           
                <center>
                    <button class="btn btn-secondary" onclick="window.location.href='${addSiteUrlWithId}'">Voir site detail</button>
                </center>
            `;
            document.querySelector('a[href="#overview"]').click(); // Activer l'onglet Overview
            sidebar.classList.remove('hidden2');
            showStations();
            showStatistics();
            showGapStatistics();

        }
        function showStations() {
            var siteId = currentSelectedMarker;
            var siteData = sites.find(site => site.id === siteId);
            if (siteData && siteData.stations.length >= 1) {
                let stationInfo = siteData.stations.map(station =>{
                    return `
                        <div class="station-card">
                            <div class="station-title">Station : ${station.code}</div>
                            <div class="station-description">Nom de la station : ${station.libelle}</div>
                            ${station.sources.length > 0 ? `
                            Sources:
                            <div id="cardContainer" style="display: flex; gap: 10px; align-items: center;"> 
                                ${station.sources.map(source => {
                                    const iconUrl = `/images/${source.nom.toLowerCase()}.svg`;
                                    return `
                                        <div class="source-card">
                                            <div class="card-content">
                                                <img src="${iconUrl}" alt="${source.nom}" style="width: 50px; height: 50px;">
                                                <div><strong>${source.nom}</strong></div>
                                            </div>
                                        </div>
                                    `;
                                }).join('')}
                            </div>
                        ` : '' }<br>
                            </div>
                        </div>
                `}).join('');
                document.getElementById('stations-content').innerHTML = `
                    ${stationInfo}
                `;
            } else {
                document.getElementById('stations-content').innerHTML = `
                    Aucune station.
                `;
            }
        }
        function showStatistics() {
            getDataByDay().then(dayData => {
                // Réinitialise le conteneur du graphique avant chaque mise à jour
                 const chartContainer = document.querySelector("#reportsChart");

                // Vérifier si le site a des données
                if (!dayData || dayData.length == 0) {
                    // Si aucune donnée n'est disponible, afficher un message et détruire l'ancien graphique s'il existe
                    chartContainer.innerHTML = 'Aucune donnée de production disponible pour ce site.';
                    if (chart) {
                        chart.destroy();  // Détruire l'ancien graphique pour éviter les conflits
                        chart = null;  // Réinitialiser la variable chart
                    }
                    return;
                }

                const labels = dayData.map(production => 
                    new Date(production.dateProduction.timestamp * 1000).toLocaleDateString());
                const data = dayData.map(production => production.sommeProduction);
                if (!labels || !data || labels.length == 0 || data.length == 0) {
                    console.error('Invalid data or labels');
                    return;
                }

                if (chart) {
                    chart.updateSeries([{
                        name: 'Production m³',
                        data: data,
                    }]);
                    chart.updateOptions({
                        xaxis: { categories: labels },
                    });
                } else {
                    chart = new ApexCharts(document.querySelector("#reportsChart"), {
                        series: [{
                            name: 'Production m³',
                            data: data,
                        }],
                        chart: {
                            height: 350,
                            type: 'area',
                            toolbar: { 
                                show: true,
                                tools: {
                                    download: true,
                                    selection: false,
                                    zoom: false,  // Active le bouton de zoom
                                    zoomin: false,  // Active le bouton de zoom avant
                                    zoomout: false,  // Active le bouton de zoom arrière
                                    pan: false,  // Désactive le mode panoramique
                                    reset: false  
                                }
                            }
                        },
                        markers: {
                            size: 4
                        },
                        colors: ['#4154f1'],
                        fill: {
                            type: "gradient",
                            gradient: {
                                shadeIntensity: 1,
                                opacityFrom: 0.3,
                                opacityTo: 0.4,
                                stops: [0, 90, 100]
                            }
                        },
                        dataLabels: {
                            enabled: false
                        },
                        stroke: {
                            curve: 'smooth',
                            width: 2
                        },
                        yaxis: {
                            title: {
                            text: 'Production d\'eau en m³'
                            }
                        },
                        xaxis: { categories: labels },
                    });
                    chart.render();
                }
            }).catch(error => {
                console.error('Error fetching or processing data:', error);
            });
        }
        function showGapStatistics() {
            getDataByDay().then(gapData => {
                
                 const chartContainerGAP = document.querySelector("#reportsChartGap");

                // Vérifier si le site a des données
                if (!gapData || gapData.length == 0) {
                    // Si aucune donnée n'est disponible, afficher un message et détruire l'ancien graphique s'il existe
                    chartContainerGAP.innerHTML = 'Aucune donnée de gap disponible pour ce site.';
                    if (gapChart) {
                        gapChart.destroy();  // Détruire l'ancien graphique pour éviter les conflits
                        gapChart = null;  // Réinitialiser la variable chart
                    }
                    return;
                }
                const labels = gapData.map(gap => 
                    new Date(gap.dateProduction.timestamp * 1000).toLocaleDateString());
                const data = gapData.map(production => production.gap);

                if (gapChart) {
                    gapChart.updateSeries([{
                        name: 'Gap',
                        data: data,
                    }]);
                    gapChart.updateOptions({
                        xaxis: { categories: labels },
                    });
                } else {
                    gapChart = new ApexCharts(document.querySelector("#reportsChartGap"), {
                        series: [{
                            name: 'Gap en %',
                            data: data ,
                        }],
                        chart: {
                            height: 350,
                            type: 'bar',
                            toolbar: { show: true },

                        },
                        markers: {
                            size: 4
                        },
                        plotOptions: {
                        bar: {
                            horizontal: false,
                            columnWidth: '55%',
                            endingShape: 'rounded'
                        },
                        },
                        dataLabels: {
                            enabled: false
                        },
                        stroke: {
                            curve: 'smooth',
                            width: 2
                        },
                        yaxis: {
                            title: {
                            text: 'Gap en %'
                            }
                        },
                        xaxis: { categories: labels },
                    });
                    gapChart.render();
                }
            }).catch(error => {
                console.error('Error fetching or processing gap data:', error);
            });
        }
        function addPolygons(sites) {
            removePolygons();
            sites.forEach(function(site) {
                var coordinates = site.coord.map(function(coord) {
                    return [coord.latitude, coord.longitude];
                });
                // Définir la couleur de remplissage en fonction de l'état du site
                var fillColor = "#a9a9a9"; // gris (moins clair)
                if (site.etat == '1') {
                    fillColor = "#87ceeb"; // bleu (moins clair)
                } else if (site.etat == '2') {
                    fillColor = "#fffacd"; // jaune (moins clair)
                } else if (site.etat == '3') {
                    fillColor = "#ffcc99"; // orange (moins clair)
                } else if (site.etat == '4') {
                    fillColor = "#ff6666"; // rouge (moins clair)
                }


                var polygon = L.polygon(coordinates, {
                    color: "#000000",  // couleur de bordure du polygone
                    fillColor: fillColor,  // couleur de remplissage selon l'état
                    fillOpacity: 0.5,  // transparence du remplissage
                    weight: 2  // épaisseur de la bordure
                }).addTo(map).bindPopup(site.libelle);

                polygon.on('click', function(e) {
                    map.setView(e.latlng, 11);
                    currentSelectedMarker = site.id;
                    console.log(site);
                    updateSidebarContent(site);
                    showSiteStations(site);
                });

                polygons.push(polygon);
            });
        }
        addPolygons(sites);
        function getDataByDay() {
            var siteId = currentSelectedMarker
            return fetch(`/site/production/day/${siteId}`)
            .then(response => response.json())
            .then(data => {
                let datas = JSON.parse(data);
                datas.reverse();
                return datas; 
            })
            .catch(error => {
                console.error('Error fetching daily production data:', error);
                return [];
            });
        }
    function removeStationMarkers() {
        stationMarkers.forEach(function(marker) {
            map.removeLayer(marker);
        });
        stationMarkers = [];
    }

    // Fonction pour afficher les stations du site sur la carte
    function showSiteStations(site) {
        // Supprimer les anciens marqueurs des stations
        removeStationMarkers();

        // Parcourir les stations du site et les ajouter à la carte
        site.stations.forEach(function(station) {
            const iconUrls = `/images/${station.sources[0].nom.toLowerCase()}.svg`;
            var stationIcon = L.icon({
                iconUrl: iconUrls, // Ton image SVG pour les stations
                iconSize: [25, 41], // Taille de l'icône
                iconAnchor: [12, 41],
                popupAnchor: [1, -34]
            });

            // Créer un marqueur pour chaque station et l'ajouter à la carte
            var marker = L.marker([station.latitude, station.longitude], { icon: stationIcon }).addTo(map);
            
            // Ajouter une popup ou tout autre comportement au clic sur la station
            marker.bindPopup(station.libelle);
            
            // Ajouter le marqueur à la liste des marqueurs de stations pour pouvoir les supprimer ensuite
            stationMarkers.push(marker);
        });
    }
        
        var sidebar = document.getElementById('sidebar-info');
         //desactive l'interaction avec la map lorsque le curseur est sur mon sidebar
        sidebar.addEventListener('mouseenter', function() {
            map.dragging.disable();
            map.scrollWheelZoom.disable();
            map.doubleClickZoom.disable();
        });

        // Réactiver l'interaction avec la map lorsque le curseur quitte le sidebar
        sidebar.addEventListener('mouseleave', function() {
            map.dragging.enable();
            map.scrollWheelZoom.enable();
            map.doubleClickZoom.enable();
        });
        function closeSidebar() {
            sidebar.classList.add('hidden2');
        }

        map.zoomControl.setPosition('bottomright');
    </script>
{% endblock %}
