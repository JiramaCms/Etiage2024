{% extends 'base.html.twig' %}

{% block title %}Map of Madagascar Sites{% endblock %}

{% block menuactive %}map{% endblock %}

{% block body %}
    <style>
        /* Custom styles for the map */
        #map {
            height: 500px; 
            position: relative;
        }
        .legend {
            background: white;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            position: absolute;
            bottom: 18px;
            left: 18px;
            z-index: 1000;
        }
        .legend i {
            width: 15px;
            height: 15px;
            display: inline-block;
            margin-right: 8px;
            border-radius: 50%;
        }
        .legend .toggle-zones {
            cursor: pointer;
            text-decoration: none;
        }
        .legend .zone-polygon {
            background: blue; /* Couleur de remplissage du polygone */
            clip-path: polygon(50% 0%, 100% 38%, 81% 100%, 19% 100%, 0% 38%); /* Pentagone */
            width: 15px;
            height: 15px;
            display: inline-block;
            margin-right: 8px;
            cursor: pointer;
            text-decoration: none;
        }
        .strikethrough {
            opacity: 0.3;
            text-decoration: line-through;
        }
        .sidebar-info {
            position: absolute;
            top: 0;
            right: 0;
            width: 380px;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.9);
            padding: 20px;
            box-shadow: -2px 0 5px rgba(0,0,0,0.5);
            overflow-y: auto;
            z-index: 1000;
            margin: 2px;
            border-radius: 15px;
        }
        .hidden2 {
            display: none;
        }
        .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: transparent;
            border: none;
            font-size: 20px;
            cursor: pointer;
        }
        .marker-icon-jump {
            animation: jumpMarker 0.8s infinite alternate;
        }
        #overview-content {
            display: flex;
            flex-direction: column;
        }

        .source-container {
            display: flex;
            flex-direction: row-reverse; /* Align icons from right to left */
            gap: 10px; /* Add some space between cards */
        }

        .source-card {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        .card-content img {
            width: 50px;
            height: 50px;
        }
        .incident-card {
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ddd; /* Ajoute une bordure autour de chaque incident */
            border-radius: 5px;    /* Ajoute des coins arrondis */
            background-color: #f9f9f9; /* Couleur de fond */
            box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* Ombre légère */
        }

        .incident-title {
            font-weight: bold;
            margin-bottom: 5px;
        }

        .incident-description {
            margin-bottom: 5px;
        }

        .incident-date {
            color: #666; /* Couleur de texte plus claire pour la date */
            font-size: 0.9em; /* Réduit légèrement la taille de la police */
        }

        /* Séparateur entre les incidents */
        .incident-card + .incident-card {
            border-top: 1px solid #ddd; /* Trait de séparation */
            padding-top: 10px;
            margin-top: 10px;
        }
        @keyframes jumpMarker {
            from {
                opacity: 1;
            }
            to {
                opacity: 0.3;
            }
        }
    </style>

    <main id="main" class="main">

    <div class="pagetitle">

        <div class="d-flex justify-content-between align-items-center mb-3">
            <h1>Map Madagascar</h1>
        </div>
        <nav>
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="{{ path('site_liste') }}">Home</a></li>
            </ol>
        </nav>
    </div><!-- End Page Title -->

    <section class="section">
        <div class="row">
            <div class="col-lg-12">

                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Sites Madagascar</h5>

                        <div id="map">
                            <div id="card-container"></div>
                            <div class="sidebar-info hidden2" id="sidebar-info">
                                <button class="close-btn" onclick="closeSidebar()">×</button>
                                <ul class="nav nav-tabs" role="tablist">
                                    <li class="nav-item" role="presentation">
                                        <a class="nav-link active" id="tabOverview" data-bs-toggle="tab" href="#overview" role="tab" aria-selected="true">Overview</a>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <a class="nav-link" id="tabIncident" data-bs-toggle="tab" href="#incidents" role="tab" aria-selected="false">Incidents</a>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <a class="nav-link" id="tabStatistique" data-bs-toggle="tab" href="#statistique" role="tab" aria-selected="false">Statistique</a>
                                    </li>
                                </ul>
                                <div class="tab-content">
                                    <div class="tab-pane fade show active" id="overview" role="tabpanel">
                                        <h4>Overview</h4>
                                        <div id="source-icons"></div> <!-- Placeholder for source icons -->
                                        <p id="overview-content"></p>
                                    </div>
                                    <div class="tab-pane fade" id="incidents" role="tabpanel">
                                        <h4>Incidents</h4>
                                        <p id="incidents-content"></p>
                                    </div>
                                    <div class="tab-pane fade" id="statistique" role="tabpanel">
                                        <h4>Statistique</h4>
                                        <p id="reportsChart"></p>
                                        <h5>Gap Statistics</h5>
                                        <p id="reportsChartGap"></p>
                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="legend" class="legend">
                            <h5>Légende</h5>
                            <div><i style="background: blue;"></i> Site bleu</div>
                            <div><i style="background: green;"></i> Site vert</div>
                            <div><i style="background: orange;"></i> Site orange</div>
                            <i class="zone-polygon" id="legend-text" onclick="toggleZonesVisibility()"></i> 
                            <span id="zone-label" class="">Zone</span>
                        </div>
                        <!-- End Table with stripped rows -->

                    </div>
                </div>

            </div>
        </div>
    </section>

</main><!-- End #main -->

    <link rel="stylesheet" href="https://unpkg.com/leaflet-fullscreen/dist/leaflet.fullscreen.css" />
    <script src="https://unpkg.com/leaflet-fullscreen/dist/Leaflet.fullscreen.min.js"></script>
    <script>
        var map = L.map('map').setView([-18.922647647936802, 47.46631766551795], 10);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: 'Map data © <a href="https://openstreetmap.org">OpenStreetMap</a> contributors'
        }).addTo(map);

        var zones = {{ zone|raw }};
        let sitesData =  {{ sites|raw }};
        var polygons = [];
        var zonesVisible = true;
        var addObservationUrl = "{{ path('app_add_incidentById', {'id': 'siteId'}) }}";
        var siteDetailUrl = "{{ path('detail_site',{'id' : 'siteId'})}}";
        function showOverview() {
            var siteId = currentSelectedMarker;
            fetchSiteDetails(siteId);
        }

        function showIncidents() {
            var siteId = currentSelectedMarker;
            var siteData = sitesData.find(site => site.id === siteId);

            if (siteData && siteData.incidents.length >= 1) {
                let incidentInfo = siteData.incidents.map(incident =>{
                // Convertion dua timestamp en millisecondes
                let timestampInMilliseconds = incident.daty.timestamp * 1000;
                let date = new Date(timestampInMilliseconds);
                // Formatage de la date et de l'heure en UTC
                let formattedDate = date.toISOString().slice(0, 10); // 'YYYY-MM-DD'
                let formattedTime = date.toISOString().slice(11, 19); // 'HH:MM:SS'

            return `
                <div class="incident-card">
                    <div class="incident-title">Incident : ${incident.libelle}</div>
                    <div class="incident-description">Description : ${incident.description}</div>
                    <div class="incident-date">Date et heure : ${formattedDate} ${formattedTime}</div>
                </div>
            `}).join('');
                var addObservationUrlWithId = addObservationUrl.replace('siteId', siteData.id);
                document.getElementById('incidents-content').innerHTML = `
                    ${incidentInfo}
                    <button  class="btn btn-info" onclick="window.location.href='${addObservationUrlWithId}'">Ajouter un incident</button>

                `;
            } else {
                document.getElementById('incidents-content').innerHTML = `
                    Aucun incident trouvé.
                    <button class="btn btn-info" onclick="window.location.href='${addObservationUrlWithId}'">Ajouter un incident</button>

                `;
            }
        }
        function closeInfoCard() {
            document.getElementById('info-card').style.display = 'none';
        }
        function updateSidebarContent(siteData, zoneData) {
            var addSiteUrlWithId = siteDetailUrl.replace('siteId', siteData.id);
            console.log(addSiteUrlWithId);
            if (!Array.isArray(zoneData)) {
                console.error('Les données de zones ne sont pas un tableau:', zoneData);
                return;
            }
            let sourceInfo = siteData.sources.map(source => `
                ${source.nom}
            `)

            let zonesInfo = zoneData.map(zone => `
                <div>
                    <strong>Zone : ${zone.libelle}</strong><br>
                    Description : ${zone.description}
                </div>
            `);

            document.getElementById('overview-content').innerHTML = `
                <strong>Nom : ${siteData.libelle}</strong>
                Adresse : ${siteData.adresse}<br>
                Latitude : ${siteData.coord.latitude}<br>
                Longitude : ${siteData.coord.longitude}<br>

                ${siteData.sources.length > 0 ? `
                    <strong>Sources : </strong><br>
                    <div id="cardContainer" style="display: flex; gap: 10px; align-items: center;"> 
                        ${siteData.sources.map(source => {
                            const iconUrl = `/images/${source.nom.toLowerCase()}.svg`;
                            return `
                                <div class="source-card">
                                    <div class="card-content">
                                        <img src="${iconUrl}" alt="${source.nom}" style="width: 50px; height: 50px;">
                                        <div><strong>${source.nom}</ strong></div>
                                    </div>
                                </div>
                            `;
                        }).join('')}
                    </div>
                ` : '' }<br>

                ${zonesInfo.join('')}
                
                <center>
                    <button class="btn btn-info" onclick="window.location.href='${addSiteUrlWithId}'">Voir site detail</button>
                </center>
            `;
            document.querySelector('a[href="#overview"]').click(); // Activer l'onglet Overview
            sidebar.classList.remove('hidden2');
            showIncidents();
            showStatistics();
            showGapStatistics(); // Call the function to display gap statistics

        }

        let chart = null;
        let gapChart = null;

        function getDataByDay() {
            var siteId = currentSelectedMarker
            return fetch(`/site/production/day/${siteId}`)
            .then(response => response.json())
            .then(data => {
                let datas = JSON.parse(data);
                datas.reverse();
                console.log(datas[0]);
                return datas; 
            })
            .catch(error => {
                console.error('Error fetching daily production data:', error);
                return [];
            });
        }

        function showStatistics() {
            getDataByDay().then(dayData => {
                if (!dayData || dayData.length === 0) {
                    document.getElementById('reportsChart').innerHTML = 'Aucune donnée de production disponible pour ce site.';
                    return;
                }

                const labels = dayData.map(production => 
                    new Date(production.daty.timestamp * 1000).toLocaleDateString());
                const data = dayData.map(production => production.quantite);
                if (!labels || !data || labels.length === 0 || data.length === 0) {
                    console.error('Invalid data or labels');
                    return;
                }

                if (chart) {
                    chart.updateSeries([{
                        name: 'Production m³',
                        data: data,
                    }]);
                    chart.updateOptions({
                        xaxis: { categories: labels },
                    });
                } else {
                    chart = new ApexCharts(document.querySelector("#reportsChart"), {
                        series: [{
                            name: 'Production m³',
                            data: data,
                        }],
                        chart: {
                            height: 350,
                            type: 'area',
                            toolbar: { show: false },
                        },
                        markers: {
                            size: 4
                        },
                        colors: ['#4154f1'],
                        fill: {
                            type: "gradient",
                            gradient: {
                                shadeIntensity: 1,
                                opacityFrom: 0.3,
                                opacityTo: 0.4,
                                stops: [0, 90, 100]
                            }
                        },
                        dataLabels: {
                            enabled: false
                        },
                        stroke: {
                            curve: 'smooth',
                            width: 2
                        },
                        xaxis: { categories: labels },
                    });
                    chart.render();
                }
            }).catch(error => {
                console.error('Error fetching or processing data:', error);
            });
        }
        function showGapStatistics() {
            getDataByDay().then(gapData => {
                if (!gapData || gapData.length === 0) {
                    document.getElementById('reportsChartGap').innerHTML = 'Aucune donnée de gap disponible pour ce site.';
                    return;
                }

                const labels = gapData.map(gap => 
                    new Date(gap.daty.timestamp * 1000).toLocaleDateString());
                const data = gapData.map(production => production.gap);

                if (gapChart) {
                    gapChart.updateSeries([{
                        name: 'Gap',
                        data: data,
                    }]);
                    gapChart.updateOptions({
                        xaxis: { categories: labels },
                    });
                } else {
                    gapChart = new ApexCharts(document.querySelector("#reportsChartGap"), {
                        series: [{
                            name: 'Gap',
                            data: data,
                        }],
                        chart: {
                            height: 350,
                            type: 'area',
                            toolbar: { show: false },
                        },
                        markers: {
                            size: 4
                        },
                        colors: ['#ff5733'], // Change color as needed
                        fill: {
                            type: "gradient",
                            gradient: {
                                shadeIntensity: 1,
                                opacityFrom: 0.3,
                                opacityTo: 0.4,
                                stops: [0, 90, 100]
                            }
                        },
                        dataLabels: {
                            enabled: false
                        },
                        stroke: {
                            curve: 'smooth',
                            width: 2
                        },
                        xaxis: { categories: labels },
                    });
                    gapChart.render();
                }
            }).catch(error => {
                console.error('Error fetching or processing gap data:', error);
            });
        }

        function fetchZoneDetails(zoneId) {
            fetch(`/site/liste/detailZone/${zoneId}`)
                .then(response => response.json())
                .then(data => {
                    let datas = JSON.parse(data);
                    var zoneData = zones.find(zone => zone.id === zoneId);
                    if (zoneData) {
                        showZoneSidebar(zoneData, datas);
                    }
                })
                .catch(error => console.error('Erreur:', error));
        }

        function addPolygons(zones) {
            removePolygons();
            zones.forEach(function(zone) {
                var coordinates = zone.coord.map(function(coord) {
                    return [coord.latitude, coord.longitude];
                });
                var polygon = L.polygon(coordinates).addTo(map).bindPopup(zone.libelle);
                polygon.on('click', function(e) {
                    fetchZoneDetails(zone.id);
                    currentSelectedMarker = null;
                });

                polygons.push(polygon);
            });
        }

        function showZoneSidebar(zone, siteData) {
            let siteInfo = siteData.map(site => `
                <div>
                    <strong>nom : ${site.libelle}</strong><br>
                    Adresse : ${site.adresse}<br>
                    Etat : ${site.etat}
                </div>
            `);

            let zoneInfo = `
                <div>
                    <p> <strong>Zone : ${zone.libelle}</strong></p>
                    Description : ${zone.description}
                    <p>Coordonnées : ${zone.coord.map(coord => `(${coord.latitude}, ${coord.longitude})`).join(', ')}</p>
                    Sites:
                    ${siteInfo}
                </div>
            `;
            document.getElementById('overview-content').innerHTML = zoneInfo;
            document.querySelector('a[href="#overview"]').click(); // Activer l'onglet Overview
            sidebar.classList.remove('hidden2');
            showIncidents();
            showStatistics();
        }

        function removePolygons() {
            polygons.forEach(function(polygon) {
                map.removeLayer(polygon);
            });
            polygons = [];
        }

        function toggleZonesVisibility() {
            var toggleElement = document.querySelector('.zone-polygon');
            var zoneLabel = document.getElementById('zone-label');
            zonesVisible = !zonesVisible;
            if (zonesVisible) {
                addPolygons(zones);
                toggleElement.classList.remove('strikethrough');
                zoneLabel.classList.remove('strikethrough');
            } else {
                removePolygons();
                toggleElement.classList.add('strikethrough');
                zoneLabel.classList.add('strikethrough');
            }
        }

        addPolygons(zones);

        var sidebar = document.getElementById('sidebar-info');
        var markers = [];
        var currentSelectedMarker = null;

        //desactive l'interaction avec la map lorsque le curseur est sur mon sidebar
        sidebar.addEventListener('mouseenter', function() {
            map.dragging.disable();
            map.scrollWheelZoom.disable();
            map.doubleClickZoom.disable();
        });

        // Réactiver l'interaction avec la map lorsque le curseur quitte le sidebar
        sidebar.addEventListener('mouseleave', function() {
            map.dragging.enable();
            map.scrollWheelZoom.enable();
            map.doubleClickZoom.enable();
        });

        function closeSidebar() {
            sidebar.classList.add('hidden2');
            markers.forEach(function(m) {
                m.getElement().classList.remove('marker-icon-jump');
            });
        }

        

        function fetchSiteDetails(siteId) {
            fetch(`/site/liste/detailSite/${siteId}`)
                .then(response => response.json())
                .then(data => {
                    let datas = JSON.parse(data);
                    var siteData = sitesData.find(site => site.id === siteId);
                    if (siteData) {
                        updateSidebarContent(siteData, datas);
                    }
                })
                .catch(error => console.error('Erreur:', error));
        }

        sitesData.forEach(function(site) {
            var iconUrl = "/images/marker-green.svg";
            if (site.etat == '1') {
                iconUrl = "/images/marker-blue.svg";
            } else if (site.etat == '2') {
                iconUrl = "/images/marker-green.svg";
            } else if (site.etat == '3') {
                iconUrl = "/images/marker-orange.svg";
            }

            var markerIcon = L.icon({
                iconUrl: iconUrl,
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34]
            });

            var marker = L.marker([site.latitude, site.longitude], { icon: markerIcon }).addTo(map);
            markers.push(marker);

            marker.on('click', function(e) {
                map.setView(e.latlng, 12);

                markers.forEach(function(m) {
                    m.getElement().classList.remove('marker-icon-jump');
                });

                e.target.getElement().classList.add('marker-icon-jump');
                currentSelectedMarker = site.id;
                fetchSiteDetails(site.id);

            });
        });

        map.zoomControl.setPosition('bottomright');
    </script>
{% endblock %}
