{% extends 'base.html.twig' %}

{% block title %}Map of Madagascar prévision{% endblock %}

{% block menuactive %}map{% endblock %}

{% block body %}
<style>
    #map {
        height: 700px;
        width: 100%;
        position: relative;
    }

    .content-container {
        display: flex;
        flex-direction: row;
    }

    .map-section {
        width: 65%;
        position: relative;
    }

    .form-chart-column {
        width: 35%;
        display: flex;
        flex-direction: column;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 8px;
    }

    .form-control[disabled], .form-control[readonly], fieldset[disabled] .form-control {
        background-color: #fffffc;
        color: #444;
    }

    .form-section {
        margin-bottom: 20px;
    }

    .chart-section {
        background-color: #ffffff;
        padding: 10px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .marker-icon-jump {
        animation: jumpMarker 0.8s infinite alternate;
    }
    .etiage-result-card {
        background-color: #f8f9fa;
        border: 0.2px solid #ced4da;
        border-radius: 8px;
        padding: 20px;
        margin-top: 20px;
        max-width: 600px;
        box-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);
    }

    .etiage-result-title {
        font-size: 1.5em;
        margin-bottom: 10px;
        color: #343a40;
    }

    .etiage-result-card p {
        margin: 8px 0;
        font-size: 1em;
        color: #495057;
    }

    .etiage-result-card p strong {
        font-weight: 600;
    }

    .etiage-year,
    .etiage-site,
    .etiage-date,
    .etiage-duration,
    .etiage-production,
    .etiage-gap {
        color: #007bff;
        font-weight: 500;
    }

    @keyframes jumpMarker {
        from {
            opacity: 1;
        }
        to {
            opacity: 0.3;
        }
    }

    /* Style pour la légende */

    .map-section {
    width: 65%;
    position: relative; /* Nécessaire pour les enfants en position absolue */
}
    .legend {
    position: absolute; /* Attachée par rapport au parent positionné */
    bottom: 10px;       /* 10px depuis le bas de la carte */
    left: 10px;         /* 10px depuis la gauche */
    background-color: white;
    border: 0.5px solid #444;
    padding: 10px;
    border-radius: 8px;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
    font-size: 14px;
    line-height: 18px;
    color: #333;
    z-index: 1000; /* S'assure que la légende est au-dessus de la carte */
    font-family: 'Poppins', sans-serif;
    pointer-events: none; /* Empêche l'interaction de la souris sur la légende */
}


    .legend h5 {
        margin-top: 0;
        font-size: 16px;
        text-align: center;
        font-weight: 500;
    }

    .legend div {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
        padding-bottom: 5px;
        border-bottom: 1px solid #ccc;
    }

    /* Retirer la bordure inférieure du dernier élément */
    .legend div:last-child {
        border-bottom: none;
    }

    /* Style des icônes FontAwesome */
    .legend i {
        font-size: 18px;
        margin-right: 8px;
    }
    .zone-polygon {
    background: blue; /* Couleur de remplissage du polygone */
        clip-path: polygon(50% 0%, 100% 38%, 81% 100%, 19% 100%, 0% 38%); /* Pentagone */
        width: 15px;
        height: 15px;
        display: inline-block;
        margin-right: 8px;
        cursor: pointer;
        text-decoration: none;
    }
    /* Couleurs pour chaque niveau de "Gap" */
    .polygon-gray { background-color: #b0b0b0; }   /* Gris pour "Pas de Gap" */
    .polygon-blue { background-color: #87CEEB; }   /* Bleu pour "Production juste" */
    .polygon-yellow { background-color: #FFE680; } /* Jaune pour "Gap < 25%" */
    .polygon-orange { background-color: #FFB266; } /* Orange pour "25% < Gap < 50%" */
    .polygon-red { background-color: #FF6666; }  
    .strikethrough {
        opacity: 0.3;
        text-decoration: line-through;
    }
</style>

<main id="main" class="main">
    <div class="pagetitle">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h1>Map Madagascar étiage</h1>
        </div>
        <nav>
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="{{ path('site_liste') }}">Accueil</a></li>
                <li class="breadcrumb-item active">Simulation étiage</li>

            </ol>
        </nav>
    </div>

    <section class="section">
        <div class="content-container">
            <!-- Section Carte -->
            <div class="map-section">
                <div id="map">
                <div id="legend" class="legend">
                    <h5>Légende</h5>
                    <div><i class="zone-polygon polygon-gray"></i>Pas de Gap</div>
                    <div><i class="zone-polygon polygon-blue"></i>Production juste</div>
                    <div><i class="zone-polygon polygon-yellow"></i>Gap < 25%</div>
                    <div><i class="zone-polygon polygon-orange"></i>25% < Gap < 50%</div>
                    <div><i class="zone-polygon polygon-red"></i>Gap > 50%</div>
                </div>
                </div>
                
            </div>

            <!-- Section Formulaire et Graphique (Colonne de droite) -->
            <div class="form-chart-column">
                <!-- Formulaire -->
                <div id="sidebar">
                    <form id="etiage-form">
                        <div class="form-group">
                            <label for="year">Sélectionnez une année :</label>
                            <select id="year" name="year" class="form-control">
                                <!-- Liste des années -->
                                <option value="2024">2024</option>
                                <option value="2025">2025</option>
                                <!-- Ajoute d'autres années -->
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="selected-site-zone">Site/Zone sélectionné :</label>
                            <input type="text" id="selected-site-zone" name="site-zone" class="form-control" readonly>
                        </div>
                        <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-primary " id="predict-button">Prédire l'étiage</button>
                        </div>
                    </form>
                </div>
                <!-- Nouvelle section pour afficher les résultats -->
                <div id="prediction-result" class="prediction-result" style="display: none; margin-top: 5px;">
                    <h5>Résultat de la prévision d'étiage</h5>
                    <div id="result-content">
                        <!-- Le contenu du résultat sera injecté ici -->
                    </div>
                </div>
                <div id="solution-result" style="display:none;" class="mt-4">
                    <!-- La solution proposée sera insérée ici -->
                </div>
            </div>
        </div>
    </section>
</main>
<!-- Leaflet and fullscreen -->
<link rel="stylesheet" href="https://unpkg.com/leaflet-fullscreen/dist/leaflet.fullscreen.css" />
<script src="https://unpkg.com/leaflet-fullscreen/dist/Leaflet.fullscreen.min.js"></script>

<!-- Chart.js or ApexCharts -->
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script>
    var map = L.map('map').setView([-18.922647647936802, 47.46631766551795], 6);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Map data © <a href="https://openstreetmap.org">OpenStreetMap</a> contributors'
    }).addTo(map);

    let sitesData =  {{ sites|raw }};
    var polygons = [];
    let previsions = [];



    function removePolygons() {
        polygons.forEach(function(polygon) {
            map.removeLayer(polygon);
        });
        polygons = [];
    }
    var markers = [];
     function addPolygons(sites) {
            removePolygons();
            sites.forEach(function(site) {
                var coordinates = site.coord.map(function(coord) {
                    return [coord.latitude, coord.longitude];
                });
                // Définir la couleur de remplissage en fonction de l'état du site
                var fillColor = "#a9a9a9"; // gris (moins clair)
                if (site.etat == '1') {
                    fillColor = "#87ceeb"; // bleu (moins clair)
                } else if (site.etat == '2') {
                    fillColor = "#fffacd"; // jaune (moins clair)
                } else if (site.etat == '3') {
                    fillColor = "#ffcc99"; // orange (moins clair)
                } else if (site.etat == '4') {
                    fillColor = "#ff6666"; // rouge (moins clair)
                }


                var polygon = L.polygon(coordinates, {
                    color: "#000000",  // couleur de bordure du polygone
                    fillColor: fillColor,  // couleur de remplissage selon l'état
                    fillOpacity: 0.5,  // transparence du remplissage
                    weight: 2  // épaisseur de la bordure
                }).addTo(map).bindPopup(site.libelle);

                polygon.on('click', function(e) {
                    //map.setView(e.latlng, 11);
                    //currentSelectedMarker = site.id;
                    console.log(site);
                    document.getElementById('selected-site-zone').value = site.libelle;

                });

                polygons.push(polygon);
            });
        }
        addPolygons(sitesData);
    /*sitesData.forEach(function(site){
        var iconUrl = "/images/marker-gray.svg";
        if (site.etat == '1') {
            iconUrl = "/images/marker-blue.svg";
        }  else if (site.etat == '2') {
            iconUrl = "/images/marker-yellow.svg";
        } else if (site.etat == '3') {
            iconUrl = "/images/marker-orange.svg";
        }
        else if (site.etat == '4') {
            iconUrl = "/images/marker-red.svg";
        }
        var markerIcon = L.icon({
            iconUrl: iconUrl,
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34]
        });
        var marker = L.marker([site.latitude, site.longitude], { icon: markerIcon }).addTo(map).bindPopup(site.libelle);
        markers.push(marker);

        marker.on('click', function(e) {
            map.setView(e.latlng, 9);

            markers.forEach(function(m) {
                m.getElement().classList.remove('marker-icon-jump');
            });

            e.target.getElement().classList.add('marker-icon-jump');
            document.getElementById('selected-site-zone').value = site.libelle;

            
        });
    });*/
    document.getElementById('predict-button').addEventListener('click', function() {

        var solutionDiv = document.getElementById('solution-result');
        solutionDiv.style.display = 'none';
        var year = document.getElementById('year').value;
        var selectedZone = document.getElementById('selected-site-zone').value;
        if (!year) {
            alert("Veuillez sélectionner une année.");
            return;
        }
        if (!selectedZone) {
            alert("Veuillez sélectionner une zone ou un site.");
            return;
        }

        var data = {
            'siteLibelle': selectedZone,
            'year': year
        };
        fetch('/predict-etiage', {  // Adjust the URL to your backend route
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(responseData => {
            console.log(responseData);
            // Afficher les résultats dans la div "prediction-result"
            var resultDiv = document.getElementById('prediction-result');
            var resultContent = document.getElementById('result-content');
            
            // Assurez-vous que la div du résultat est visible
            resultDiv.style.display = 'block';
            var etiageDate = new Date(responseData.etiage.lowest.date);
            var year = etiageDate.getFullYear();
            
            // Insérer le contenu du résultat (modifiez cela en fonction de la réponse que vous obtenez)
            resultContent.innerHTML = `
            
                 <div class="etiage-result-card">
                    <h3 class="etiage-result-title">Résultats de l'Étiage</h3>
                    <p><strong>Site:</strong> <span class="etiage-site">${data.siteLibelle}</span></p>
                    <p><strong>Année:</strong> <span class="etiage-year">${year}</span></p>
                    <p><strong>Durée des basses eaux:</strong> <span class="etiage-duration">${responseData.etiage.daysBetween}</span> jours</p>
                    <p><strong>Date de l'étiage:</strong> <span class="etiage-date">${responseData.etiage.lowest.date}</span></p>
                    <p><strong>Quantité produite:</strong> <span class="etiage-production">${responseData.etiage.lowest.production}</span> m³</p>
                    <p><strong>Gap:</strong> <span class="etiage-gap">${responseData.gap}</span>%</p>
                </div>
            `;
            if (responseData.gap > 0) {
                const solutionButton = `
                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-secondary" id="solution-button">Solution Proposée</button>
                    </div>
                `;
                resultContent.innerHTML += solutionButton;

                // Ajouter un événement pour le bouton "Solution Proposée"
                document.getElementById('solution-button').addEventListener('click', function() {
                    // Envoyer une requête au contrôleur Symfony
                    fetch('/predict-action', { // Ajuste l'URL vers la bonne route de ton contrôleur
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest',
                        },
                        body: JSON.stringify({
                            'gap': responseData.gap,
                            'production': responseData.etiage.lowest.production
                        })
                    })
                    .then(response => response.json())
                    .then(solutionData => {
                        let solutionDatas = JSON.parse(solutionData);
                        // Afficher les solutions proposées (ajoute ici ton code de traitement)
                        console.log(solutionDatas);

                        var solutionDiv = document.getElementById('solution-result');
                        let typeInfo = solutionDatas.types.map(type => `
                            <div>
                                <strong>Solution : ${type.libelle}</strong><br>
                                Capacité : ${type.capacite} m³
                            </div>
                        `);
                        solutionDiv.innerHTML = `
                            <div class="alert alert-info">
                                <strong>Solution Proposée :</strong>
                                <p> Gains de capacité totale : ${solutionDatas.capacite} m³</p>
                                <p>Cout totale : ${solutionDatas.cout} Ar</p>
                                ${typeInfo.join('')}
                            </div>
                        `;
                        solutionDiv.style.display = 'block';
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert("Ce site ne dispose pas assez de données pour une prévision.");
        });
    });
    

</script>
{% endblock %}
